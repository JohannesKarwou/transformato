import transformato
import os
import shutil

class IntermediateStateFactory(object):

    def __init__(self, system:transformato.system, mutation_list:list, conf:dict, output_path:str):

        self.system = system
        self.mutation_list = mutation_list
        self.path = f"{output_path}/{self.system.name}"
        self._init_base_dir()


    def generate_intermediate_states(self, strategy='seperate'):

        intst_nr = 1
        if strategy == 'seperate':
            for m in self.mutation_list:
                for current_step in range(m.nr_of_steps):
                    output_file_base = self._init_intermediate_state_dir(intst_nr)
                    for psf, offset, env in zip([self.system.complex_psf, self.system.waterbox_psf], [self.system.complex_offset, self.system.waterbox_offset], ['complex', 'waterbox']):
                        m.mutate(psf, offset, current_step)
                        self._write_psf(psf, output_file_base, env)
                    self._write_rtf_file(psf, output_file_base, self.system.tlc)
                    self._write_prm_file(psf, output_file_base, self.system.tlc)
                    self._write_toppar_str(output_file_base, self.system.tlc)
                    intst_nr += 1

    def _write_rtf_file(self, psf, output_file_base, tlc):

        header_rtf = '''* Dummy atom parameters 
* test
*
36  1
'''
        rtf_file_handler = open(output_file_base +'/dummy_atom_definitions.rtf', 'w')
        rtf_file_handler.write(header_rtf)
        for atom in psf.view[':' + tlc].atoms:            
            if hasattr(atom, 'dummy_type'):
                print('- Setting dummy parameters ...')
                print('  + Atom-Name: ', atom.name)
                print('  + Atom-Type: ', atom.type)
                print('  + Atom Dummy Type: ', atom.dummy_type)

                rtf_file_handler.write('{:7} {:6} {:6} {:6}\n'.format('MASS', atom.dummy_counter, atom.dummy_type, atom.mass))
            
        rtf_file_handler.close()    




#     def _write_prm_file(self, psf, output_file_base, tlc):
    
#         header_prm = '''* Parameters generated by analogy by
# * CHARMM General Force Field (CGenFF) program version 1.0.0
# *
# ! Automatically obtained dummy parameters 
# ! some url
# '''

#         prm_file_handler = open(output_file_base + '/dummy_parameters.prm', 'w')
#         prm_file_handler.write(header_prm)
#         prm_file_handler.write('\nATOMS\n')
#         # for debugging porpose:
#         atom_set = set()
#         bond_set = set()
#         angle_set = set()
#         dihedral_set = set()
#         improper_set = set()
#         nb_set = set()


#         # writing atom parameters
#         for atom in psf.view[':' + tlc].atoms:
#             # if dummy type is set the atom dummy type has changed
#             # this is true if either: 
#             #  - sigma or epsilon have changed in relation to the normal atom type parameters (which needs a dummy atom type)
#             #  - or a pure dummy atom with sigma and epsilon 0 was introduced
#             if hasattr(atom, 'dummy_type'):
#                 if atom.dummy_type in atom_set:
#                     continue

#                 atom_set.add(atom.dummy_type)

#                 print('- Setting dummy parameters ...')
#                 print('  + Atom-Name: ', atom.name)
#                 print('  + Atom-Type: ', atom.type)
#                 print('  + Atom Dummy Type: ', atom.dummy_type)

#                 prm_file_handler.write('{:7} {:6} {:6} {:6}\n'.format('MASS', atom.dummy_counter, atom.dummy_type, atom.mass))
            
#         prm_file_handler.write('\n\n')

#         # write bond parameters - again there are two ways to use this:
#         # - keeping bonded terms between real/dummy and dummy atoms intact
#         # - changing bonded parameters between real atoms - this again needs dummy atoms
#         prm_file_handler.write('BONDS\n')

#         for bond in psf.view[':' + tlc].bonds:
#             atom1, atom2 = bond.atom1, bond.atom2
#             if hasattr(atom1, 'dummy_type') and hasattr(atom2, 'dummy_type'):
#                 s = set(atom1.dummy_type, atom2.dummy_type)
#             elif hasattr(atom1, 'dummy_type'):
#                 s = set(atom1.dummy_type, atom2.atom_type)
#             elif hasattr(atom2, 'dummy_type'):
#                 s = set(atom1.atom_type, atom2.dummy_type)
#             else:
#                 continue

            
#             if s in bond_set:
#                 continue
                
#             bond_set.add(s)
#             atom1 = s.pop()
#             atom2 = s.pop()
#             print(' >> Setting dummy bond parameters for: ' + str(atom1) + ' - ' + str(atom2))
#             prm_file_handler.write('{:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1), str(atom2), bond.type.mod_k ,bond.type.mod_req))


#         prm_file_handler.write('\n\n')
#         prm_file_handler.write('ANGLES\n')
#         for angle in psf.view[':' + tlc].angles:
#             atom1, atom2, atom3 = angle.atom1, angle.atom2, angle.atom3
#             if hasattr(atom1, 'mutated') or hasattr(atom2, 'mutated') or hasattr(atom3, 'mutated'):
#                 if hasattr(atom1, 'dummy_type') or hasattr(atom2, 'dummy_type') or hasattr(atom3, 'dummy_type'):

#                     if set(atom1.dummy_type, atom2.dummy_type, atom3.dummy_type) in angle_set:
#                         continue
#                     angle_set.add(set(atom1.dummy_type, atom2.dummy_type, atom3.dummy_type))

#                     print(' >> Setting dummy angle parameters for: {}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type)))
#                     b= parameter.angle_types[atom1.type, atom2.type, atom3.type]
#                     prm_file_handler.write('{:7} {:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), b.k ,b.theteq))
#                 else:
#                     pass

#         prm_file_handler.write('\n\n')
#         prm_file_handler.write('DIHEDRALS\n')
#         for dihedral in psf.view[':' + tlc].dihedrals:
#             atom1, atom2, atom3, atom4 = dihedral.atom1, dihedral.atom2, dihedral.atom3, dihedral.atom4
#             if (atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type) in dihedral_set:
#                 continue
#             elif (atom4.dummy_type, atom3.dummy_type, atom2.dummy_type, atom1.dummy_type) in dihedral_set:
#                 continue
#             else:
#                 dihedral_set.add((atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type))

#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD') or atom3.dummy_type.startswith('DD') or atom4.dummy_type.startswith('DD'):
#                 logger.info(' >> Setting dummy dihedral parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
#                 b= parameter.dihedral_types[atom1.type, atom2.type, atom3.type, atom4.type]
#                 prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b[0].phi_k ,b[0].per, b[0].phase))


#         # get all unique improper and parameters
#         prm.write('\n\n')
#         prm.write('IMPROPERS\n')
#         for impr in psf.view[':' + tlc].impropers:
#             atom1, atom2, atom3, atom4 = impr.atom1, impr.atom2, impr.atom3, impr.atom4
#             if (atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type) in improper_set:
#                 continue
#             elif (atom4.dummy_type, atom3.dummy_type, atom2.dummy_type, atom1.dummy_type) in improper_set:
#                 continue
#             else:
#                 improper_set.add((atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type))
#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD') or atom3.dummy_type.startswith('DD') or atom4.dummy_type.startswith('DD'):
#                 logger.info('>> Setting dummy improper parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
#                 # carefull with this solution - > central atom has to be set in the beginning
#                 try:
#                     b= parameter.improper_types[atom2.type, atom1.type, atom3.type, atom4.type]
#                     prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b.psi_k ,0, b.psi_eq))
#                 except:
#                     b= parameter.improper_periodic_types[atom1.type, atom2.type, atom3.type, atom4.type]
#                     prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b.phi_k ,int(b.per), b.phase))

#         prm.write('\n\n')
#         prm.write('''NONBONDED nbxmod  5 atom cdiel fshift vatom vdistance vfswitch -
#         cutnb 14.0 ctofnb 12.0 ctonnb 10.0 eps 1.0 e14fac 1.0 wmin 1.5
#         ''')
#         prm.write('\n\n')

#         for atom in psf.view[':' + tlc].atoms:
#             if atom.dummy_type in nb_set:
#                 continue
#             else:
#                 nb_set.add(atom.dummy_type)

#             if atom.dummy_type.startswith('DD'):
#                 prm.write('{:7} {:6} {:6} {:6} {:6} {:6} {:6}\n'.format(atom.dummy_type, 0.0, 0.000, 0.000, 0.0, 0.000, 0.000))

#         prm.write('\n')
#         prm.write('END')

#         prm.close()


    def _write_prm_file(self, psf, output_file_base, tlc):
    
        header_prm = '''* Parameters generated by analogy by
* CHARMM General Force Field (CGenFF) program version 1.0.0
*
! Automatically obtained dummy parameters 
! some url
'''

        prm_file_handler = open(output_file_base + '/dummy_parameters.prm', 'w')
        prm_file_handler.write(header_prm)
        prm_file_handler.write('\nATOMS\n')
        # for debugging porpose:
        atom_set = set()
        bond_set = set()
        angle_set = set()
        dihedral_set = set()
        improper_set = set()
        nb_set = set()


        view = psf.view[':' + tlc]
        # writing atom parameters
        for atom in view.atoms:
            # if dummy type is set the atom dummy type has changed
            # this is true if either: 
            #  - sigma or epsilon have changed in relation to the normal atom type parameters (which needs a dummy atom type)
            #  - or a pure dummy atom with sigma and epsilon 0 was introduced
            if hasattr(atom, 'is_mutated'):
                if atom.dummy_type in atom_set:
                    continue

                atom_set.add(atom.dummy_type)

                print('- Setting dummy parameters ...')
                print('  + Atom-Name: ', atom.name)
                print('  + Atom-Type: ', atom.type)
                print('  + Atom Dummy Type: ', atom.dummy_type)

                prm_file_handler.write('{:7} {:6} {:6} {:6}\n'.format('MASS', atom.dummy_counter, atom.dummy_type, atom.mass))
            
        prm_file_handler.write('\n\n')


        ##############################################################################
        # write bond parameters - again there are two ways to use this:
        # - keeping bonded terms between real/dummy and dummy atoms intact
        # - changing bonded parameters between real atoms - this again needs dummy atoms

        prm_file_handler.write('BONDS\n')
        for bond in view.bonds:
            atom1, atom2 = bond.atom1, bond.atom2
            if hasattr(atom1, 'is_mutated') or hasattr(atom2, 'is_mutated'):
                s = set(atom1.dummy_type, atom2.dummy_type)
            else:
                continue

            if s in bond_set:
                continue
                
            bond_set.add(s)
            print(' >> Setting dummy bond parameters for: ' + str(atom1) + ' - ' + str(atom2))
            prm_file_handler.write('{:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1), str(atom2), bond.typ.k ,bond.type.req))


        #################################################################
        prm_file_handler.write('\n\n')
        prm_file_handler.write('ANGLES\n')
        for angle in view.angles:
            atom1, atom2, atom3 = angle.atom1, angle.atom2, angle.atom3
            if hasattr(atom1, 'is_mutated') or hasattr(atom2, 'is_mutated') or hasattr(atom3, 'is_mutated'):
                s = set(atom1.dummy_type, atom2.dummy_type, atom3.dummy_type)
            else:
                continue
            
            if s in angle_set:
                continue
            
            angle_set.add(s)

            print(' >> Setting dummy angle parameters for: {}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type)))
            prm_file_handler.write('{:7} {:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), b.type.k , b.type.theteq))


        #################################################################
        prm_file_handler.write('\n\n')
        prm_file_handler.write('DIHEDRALS\n')
        for dihedral in view.dihedrals:
            atom1, atom2, atom3, atom4 = dihedral.atom1, dihedral.atom2, dihedral.atom3, dihedral.atom4
            if hasattr(atom1, 'is_mutated') or hasattr(atom2, 'is_mutated') or hasattr(atom3, 'is_mutated') or hasattr(atom4, 'is_mutated'):
                s = set(atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type)
            else:
                continue

            if s in dihedral_set:
                continue
            
            dihedral_set.add(s)

            print(' >> Setting dummy dihedral parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
            for i in range(len(dihedral.type)):
                prm_file_handler.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b[i].type.phi_k ,b[i].type.per, b[i].type.phase))

        #################################################################
        # get all unique improper and parameters
        prm_file_handler.write('\n\n')
        prm_file_handler.write('IMPROPERS\n')
        for impr in view.impropers:
            atom1, atom2, atom3, atom4 = impr.atom1, impr.atom2, impr.atom3, impr.atom4
            if hasattr(atom1, 'is_mutated') or hasattr(atom2, 'is_mutated') or hasattr(atom3, 'is_mutated') or hasattr(atom4, 'is_mutated'):
                s = set(atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type)
            else:
                continue

            if s in improper_set:
                continue

            improper_set.add(s)
            
            print('>> Setting dummy improper parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
            # carefull with this solution - > central atom has to be set in the beginning
            prm_file_handler.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b.phi_k ,int(impr.type.per), impr.type.phase))

        #################################################################
        prm_file_handler.write('\n\n')
        prm_file_handler.write('''NONBONDED nbxmod  5 atom cdiel fshift vatom vdistance vfswitch -
        cutnb 14.0 ctofnb 12.0 ctonnb 10.0 eps 1.0 e14fac 1.0 wmin 1.5
        ''')
        prm_file_handler.write('\n\n')

        for atom in view.atoms:
            if not hasattr(atom, 'is_mutated'):
                continue

            if atom.dummy_type in nb_set:
                continue

            nb_set.add(atom.dummy_type)

            prm_file_handler.write('{:7} {:6} {:6} {:6} {:6} {:6} {:6}\n'.format(atom.dummy_type, 0.0, 0.000, 0.000, 0.0, 0.000, 0.000))

        prm_file_handler.write('\n')
        prm_file_handler.write('END')

        prm_file_handler.close()



    def _init_base_dir(self):
       
        if os.path.isdir(self.path):
            shutil.rmtree(self.path)
            os.makedirs(self.path)
        else:
            os.makedirs(self.path)
    
    def _write_toppar_str(self, output_file_base, tlc):

        toppar_format = """
toppar/top_all36_prot.rtf
toppar/par_all36m_prot.prm
toppar/top_all36_na.rtf
toppar/par_all36_na.prm
toppar/top_all36_carb.rtf
toppar/par_all36_carb.prm
toppar/top_all36_lipid.rtf
toppar/par_all36_lipid.prm
toppar/top_all36_cgenff.rtf
toppar/par_all36_cgenff.prm
toppar/toppar_water_ions.str
toppar/toppar_dum_noble_gases.str
toppar/toppar_all36_prot_d_aminoacids.str
toppar/toppar_all36_prot_fluoro_alkanes.str
toppar/toppar_all36_prot_heme.str
toppar/toppar_all36_prot_na_combined.str
toppar/toppar_all36_prot_retinol.str
toppar/toppar_all36_na_nad_ppi.str
toppar/toppar_all36_na_rna_modified.str
toppar/toppar_all36_lipid_bacterial.str
toppar/toppar_all36_lipid_cardiolipin.str
toppar/toppar_all36_lipid_cholesterol.str
toppar/toppar_all36_lipid_inositol.str
toppar/toppar_all36_lipid_lps.str
toppar/toppar_all36_lipid_miscellaneous.str
toppar/toppar_all36_lipid_model.str
toppar/toppar_all36_lipid_prot.str
toppar/toppar_all36_lipid_pyrophosphate.str
toppar/toppar_all36_lipid_sphingo.str
toppar/toppar_all36_lipid_yeast.str
toppar/toppar_all36_lipid_hmmm.str
toppar/toppar_all36_lipid_detergent.str
toppar/toppar_all36_lipid_ether.str
toppar/toppar_all36_carb_glycolipid.str
toppar/toppar_all36_carb_glycopeptide.str
toppar/toppar_all36_carb_imlab.str
toppar/toppar_all36_label_spin.str
toppar/toppar_all36_label_fluorophore.str
toppar/{}_g.rtf
toppar/{}.prm
dummy_atom_definitions.rtf
dummy_parameters.prm
""".format(tlc.lower(), tlc.lower())
        
        f = open(output_file_base + '/toppar.str', 'w+')
        f.write(toppar_format)
        f.close()


    def _write_psf(self, psf, output_file_base, env):
            
            print(self.system.tlc)
            for atom in psf.atoms:
                if (hasattr(atom, 'mod_charge')):
                    atom.save_charge = atom.charge
                    atom.charge = atom.mod_charge        

                if (hasattr(atom, 'dummy_type')):
                    print('There are dummies here.')
                    atom.save_type = atom.type
                    atom.type = atom.dummy_type
                
            
            psf.write_psf(f"{output_file_base}/lig_in_{env}.psf")
            psf.write_pdb(f"{output_file_base}/lig_in_{env}.pdb")
                    
            # revert the changes
            for atom in psf.atoms:
                if (hasattr(atom, 'mod_charge')):
                    atom.charge = atom.save_charge
                if (hasattr(atom, 'dummy_type')):
                    atom.type = atom.save_type




    def _init_intermediate_state_dir(self, nr):
        output_file_base = f"{self.path}/intst{nr}/" 
        if os.path.isdir(output_file_base):
            shutil.rmtree(output_file_base)

        print(' - Created directory: - ' + str(output_file_base))
        os.makedirs(output_file_base)
        print(' - Writing in - ' + str(output_file_base))
        return output_file_base



#     def _generate_state(self, output_file_base, psf, parameter, tlc):

#         prm.write('\nATOMS\n')

#         # for debugging porpose:
#         atom_set = set()
#         bond_set = set()
#         angle_set = set()
#         dihedral_set = set()
#         improper_set = set()
#         nb_set = set()

#         for atom in psf.view[':' + tlc].atoms:
#             if atom.dummy_type in atom_set:
#                 continue
#             else:
#                 atom_set.add(atom.dummy_type)
            
#             if atom.dummy_type.startswith('DD'):
#                 print('- Setting dummy parameters ...')
#                 print('  + Atom-Name: ', atom.name)
#                 print('  + Atom-Type: ', atom.type)
#                 print('  + Atom Dummy Type: ', atom.dummy_type)

#                 prm.write('{:7} {:6} {:6} {:6}\n'.format('MASS', atom.dummy_counter, atom.dummy_type, atom.mass))
#                 rtf.write('{:7} {:6} {:6} {:6}\n'.format('MASS', atom.dummy_counter, atom.dummy_type, atom.mass))
            
#         rtf.close()    
#         prm.write('\n\n')
#         prm.write('BONDS\n')

#         for bond in psf.view[':' + tlc].bonds:
#             atom1, atom2 = bond.atom1, bond.atom2
#             if (atom1.dummy_type, atom2.dummy_type) in bond_set:
#                 continue
#             elif (atom2.dummy_type, atom1.dummy_type) in bond_set:
#                 continue
#             else:
#                 bond_set.add((atom1.dummy_type, atom2.dummy_type))

#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD'):
#                 print(' >> Setting dummy bond parameters for: ' + str(atom1.dummy_type) + ' - ' + str(atom2.dummy_type))
#                 b= parameter.bond_types[atom1.type, atom2.type]        
#                 prm.write('{:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), b.k ,b.req))


#         prm.write('\n\n')
#         prm.write('ANGLES\n')
#         for angle in psf.view[':' + tlc].angles:
#             atom1, atom2, atom3 = angle.atom1, angle.atom2, angle.atom3
#             if (atom1.dummy_type, atom2.dummy_type, atom3.dummy_type) in angle_set:
#                 continue
#             elif (atom3.dummy_type, atom2.dummy_type, atom1.dummy_type) in angle_set:
#                 continue
#             else:
#                 angle_set.add((atom1.dummy_type, atom2.dummy_type, atom3.dummy_type))

#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD') or atom3.dummy_type.startswith('DD'):
#                 logger.info(' >> Setting dummy angle parameters for: {}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type)))
#                 b= parameter.angle_types[atom1.type, atom2.type, atom3.type]
#                 prm.write('{:7} {:7} {:7} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), b.k ,b.theteq))
#             else:
#                 pass

#         prm.write('\n\n')
#         prm.write('DIHEDRALS\n')
#         for dihedral in psf.view[':' + tlc].dihedrals:
#             atom1, atom2, atom3, atom4 = dihedral.atom1, dihedral.atom2, dihedral.atom3, dihedral.atom4
#             if (atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type) in dihedral_set:
#                 continue
#             elif (atom4.dummy_type, atom3.dummy_type, atom2.dummy_type, atom1.dummy_type) in dihedral_set:
#                 continue
#             else:
#                 dihedral_set.add((atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type))

#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD') or atom3.dummy_type.startswith('DD') or atom4.dummy_type.startswith('DD'):
#                 logger.info(' >> Setting dummy dihedral parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
#                 b= parameter.dihedral_types[atom1.type, atom2.type, atom3.type, atom4.type]
#                 prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b[0].phi_k ,b[0].per, b[0].phase))


#         # get all unique improper and parameters
#         prm.write('\n\n')
#         prm.write('IMPROPERS\n')
#         for impr in psf.view[':' + tlc].impropers:
#             atom1, atom2, atom3, atom4 = impr.atom1, impr.atom2, impr.atom3, impr.atom4
#             if (atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type) in improper_set:
#                 continue
#             elif (atom4.dummy_type, atom3.dummy_type, atom2.dummy_type, atom1.dummy_type) in improper_set:
#                 continue
#             else:
#                 improper_set.add((atom1.dummy_type, atom2.dummy_type, atom3.dummy_type, atom4.dummy_type))
#             if atom1.dummy_type.startswith('DD') or atom2.dummy_type.startswith('DD') or atom3.dummy_type.startswith('DD') or atom4.dummy_type.startswith('DD'):
#                 logger.info('>> Setting dummy improper parameters for: {}-{}-{}-{}'.format(str(atom1.dummy_type),str(atom2.dummy_type),str(atom3.dummy_type),str(atom4.dummy_type)))
#                 # carefull with this solution - > central atom has to be set in the beginning
#                 try:
#                     b= parameter.improper_types[atom2.type, atom1.type, atom3.type, atom4.type]
#                     prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b.psi_k ,0, b.psi_eq))
#                 except:
#                     b= parameter.improper_periodic_types[atom1.type, atom2.type, atom3.type, atom4.type]
#                     prm.write('{:7} {:7} {:7} {:7} {:6.5f} {:6.5f} {:6.5f} \n'.format(str(atom1.dummy_type), str(atom2.dummy_type), str(atom3.dummy_type), str(atom4.dummy_type), b.phi_k ,int(b.per), b.phase))

#         prm.write('\n\n')
#         prm.write('''NONBONDED nbxmod  5 atom cdiel fshift vatom vdistance vfswitch -
#         cutnb 14.0 ctofnb 12.0 ctonnb 10.0 eps 1.0 e14fac 1.0 wmin 1.5
#         ''')
#         prm.write('\n\n')

#         for atom in psf.view[':' + tlc].atoms:
#             if atom.dummy_type in nb_set:
#                 continue
#             else:
#                 nb_set.add(atom.dummy_type)

#             if atom.dummy_type.startswith('DD'):
#                 prm.write('{:7} {:6} {:6} {:6} {:6} {:6} {:6}\n'.format(atom.dummy_type, 0.0, 0.000, 0.000, 0.0, 0.000, 0.000))

#         prm.write('\n')
#         prm.write('END')

#         prm.close()


















